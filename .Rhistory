"PE" = 50,
"Prac" = 50,
"RM" = 100,
"Skill_dev" = 50
)
# Convert marks to percentage based on subject-specific max marks
OB_percentage <- OB_marks %>%
mutate(across(names(max_marks), ~ (.x / max_marks[cur_column()]) * 100))
# Reshape data to long format for line plot
OB_long <- OB_percentage %>%
pivot_longer(-c(1, 2), names_to = "Subject", values_to = "Percentage")
# Create an interactive line plot
plot_ly(OB_long, x = ~Subject, y = ~Percentage, color = ~OB_marks[[2]], type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
plot <- ggplot(df_long, aes(x = Subject, y = Marks, group = `Name of Student`, color = `Name of Student`)) +
geom_line() + # Line plot
geom_point() + # Points for better visibility
labs(title = "Student Marks Across Subjects", x = "Subjects", y = "Marks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability
ggplotly(plot)
# Create an interactive line plot
plot_ly(OB_long, x = ~Subject, y = ~Percentage, color = ~OB_marks[[2]], type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
# Convert marks to percentage based on subject-specific max marks
OB_percentage <- OB_marks %>%
mutate(across(names(max_marks), ~ (.x / max_marks[cur_column()]) * 100))
# Reshape data to long format for line plot
OB_long <- OB_percentage %>%
pivot_longer(-c(1, 2), names_to = "Subject", values_to = "Percentage")
# Create an interactive line plot (Fixing the color mapping issue)
plot_ly(
OB_long,
x = ~Subject,
y = ~Percentage,
color = ~`Name.of.Student.`,  # Properly assign student names to color
type = 'scatter',
mode = 'lines+markers'
) %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
# Create an interactive line plot (Fixing the color mapping issue)
plot_ly(
OB_long,
x = ~Subject,
y = ~Percentage,
color = ~`Name of Student`,  # Properly assign student names to color
type = 'scatter',
mode = 'lines+markers'
) %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
View(cor_matrix)
# Create an interactive line plot (Fixing the color mapping issue)
plot_ly(
OB_long,
x = ~Subject,
y = ~Percentage,
color = ~`Name of Student`,  # Properly assign student names to color
type = 'scatter',
mode = 'lines+markers'
) %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
:::: {.g-col-4 .box}
View(Overall_marks)
View(Overall_marks)
View(OB_numeric)
View(OB_numeric)
View(OB_numeric)
styler:::style_active_file()
styler:::style_active_file()
View(Overall_marks)
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 5 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(Student = "Student Name", CGPA = "CGPA")
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 5 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(Student = "Name of Student", CGPA = "CGPA")
install.packages("gt")
install.packages("gt")
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 5 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(Student = "Name of Student", CGPA = "CGPA")
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 5 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(Student = "Name of Student", CGPA = "CGPA")
#| include: false
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotly)
library(tidyverse)
library(gt)
AS_marks <- read_csv("data/AS_marks.csv")
ERC_marks <- read_csv("data/ERC_marks.csv")
LA_marks <- read_csv("data/LA_marks.csv")
Overall_marks <- read_csv("data/Overall_marks.csv")
PD_marks <- read_csv("data/PD_marks.csv")
PE_marks <- read_csv("data/PE_marks.csv")
Prac_marks <- read_csv("data/Prac_marks.csv")
RM_marks <- read_csv("data/RM_marks.csv")
Skill_dev_marks <- read_csv("data/Skill_dev_marks.csv")
OB_marks <- data.frame(AS_marks$`Roll No.`, AS_marks$`Name of Student`, AS_marks$OB, ERC_marks$OB, LA_marks$OB, PD_marks$OB, PE_marks$OB, Prac_marks$OB, RM_marks$OB, Skill_dev_marks$OB)
colnames(OB_marks) <- c("Roll No.", "Name of Student", "AS", "ERC", "LA", "PD", "PE", "Prac", "RM", "Skill_dev")
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 5 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(Student = "Name of Student", CGPA = "CGPA")
df_toppers <- Overall_marks %>%
arrange(desc(CGPA)) %>%
head(5)
df_toppers %>%
gt() %>%
tab_header(title = "Top 3 Students by CGPA") %>%
fmt_number(columns = CGPA, decimals = 2) %>%
cols_label(`Name of Student` = "Name of Student", CGPA = "CGPA")
source("E:/Result _report/helper.R")
source("E:/Result _report/helper.R")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotly)
library(tidyverse)
AS_marks <- read_csv("data/AS_marks.csv")
ERC_marks <- read_csv("data/ERC_marks.csv")
LA_marks <- read_csv("data/LA_marks.csv")
Overall_marks <- read_csv("data/Overall_marks.csv")
PD_marks <- read_csv("data/PD_marks.csv")
PE_marks <- read_csv("data/PE_marks.csv")
Prac_marks <- read_csv("data/Prac_marks.csv")
RM_marks <- read_csv("data/RM_marks.csv")
Skill_dev_marks <- read_csv("data/Skill_dev_marks.csv")
ES_marks <- data.frame(AS_marks$`Roll No.`, AS_marks$`Name of Student`, AS_marks$ES, ERC_marks$ES, LA_marks$ES, PD_marks$ES)
ES_marks <- data.frame(AS_marks$`Roll No.`, AS_marks$`Name of Student`, AS_marks$ES, ERC_marks$ES, LA_marks$ES, PD_marks$ES,PE_marks$ES, Prac_marks$ES, RM_marks$ES, Skill_dev_marks$ES)
legend_table <- tibble::tibble(
Color=c("0-40%","40-60%","60-80%","80-100%"),
"Meaning" = c("Marks below 20 (Critical Failure)",
"Marks between 20-29 (Very Low)",
"Marks between 30-39 (Near Passing)",
"Marks 40+ (Passed, Not Highlighted)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),
domain = legend_data$Color
),
apply_to = "fill"
)
legend_data <- tibble::tibble(
Range = c("0-19.99", "20-29.99", "30-39.99", "40-100"),
Color = c("#FB4141", "#F0FF42", "#82CD47", "#379237")
)
legend_table <- tibble::tibble(
Color=c("0-40%","40-60%","60-80%","80-100%"),
"Meaning" = c("Marks below 20 (Critical Failure)",
"Marks between 20-29 (Very Low)",
"Marks between 30-39 (Near Passing)",
"Marks 40+ (Passed, Not Highlighted)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),
domain = legend_data$Color
),
apply_to = "fill"
)
legend_table <- tibble::tibble(
Color=c("0-40%","40-60%","60-80%","80-100%"),
"Meaning" = c("Marks below 20 (Critical Failure)",
"Marks between 20-29 (Very Low)",
"Marks between 30-39 (Near Passing)",
"Marks 40+ (Passed, Not Highlighted)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),
domain = Color
),
apply_to = "fill"
)
styler:::style_active_file()
legend_table <- tibble::tibble(
Color=c("0-40%","40-60%","60-80%","80-100%"),
"Meaning" = c("Marks below 20 (Critical Failure)",
"Marks between 20-29 (Very Low)",
"Marks between 30-39 (Near Passing)",
"Marks 40+ (Passed, Not Highlighted)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),
domain = Color
),
apply_to = "fill"
)
library(gt)
library(dplyr)
legend_table <- tibble::tibble(
Color=c("0-40%","40-60%","60-80%","80-100%"),
"Meaning" = c("Marks below 20 (Critical Failure)",
"Marks between 20-29 (Very Low)",
"Marks between 30-39 (Near Passing)",
"Marks 40+ (Passed, Not Highlighted)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),
domain = Color
),
apply_to = "fill"
)
# Create the legend table
legend_table <- tibble::tibble(
Color = c("0-40%", "40-60%", "60-80%", "80-100%"),
Meaning = c("Marks below 40 (Critical Failure)",
"Marks between 40-60 (Low)",
"Marks between 60-80 (Good)",
"Marks 80+ (Excellent)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),  # Red, Yellow, Green, Dark Green
domain = c("0-40%", "40-60%", "60-80%", "80-100%")  # Explicitly define domain
),
apply_to = "fill"
)
# Display legend table
legend_table
# Create the legend table
tibble::tibble(
Color = c("0-40%", "40-60%", "60-80%", "80-100%"),
Meaning = c("Marks below 40 (Failure)",
"Marks between 40-60 (Low)",
"Marks between 60-80 (Good)",
"Marks 80+ (Excellent)")
) %>%
gt() %>%
tab_header(title = "Legend for Score Highlighting") %>%
data_color(
columns = Color,
colors = scales::col_factor(
palette = c("#FB4141", "#F0FF42", "#82CD47", "#379237"),  # Red, Yellow, Green, Dark Green
domain = c("0-40%", "40-60%", "60-80%", "80-100%")  # Explicitly define domain
),
apply_to = "fill"
)
# Bubble plot with facets
ggplot(long_data, aes(x = Marks, y = Count, size = Count, color = Subject)) +
geom_point(alpha = 0.7) +  # Bubble transparency
scale_size_continuous(range = c(2, 20)) +  # Adjust bubble sizes
labs(title = "Subject-wise Score Distribution",
x = "Marks",
y = "Frequency",
size = "Frequency") +
theme_minimal() +
facet_wrap(~Subject, scales = "free") +  # Separate plots for each subject
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "none")  # Remove redundant legend
# Convert data to long format
long_data <- CA_marks %>%
pivot_longer(cols = c(AS, ERC, LA, PD, PE, Prac, RM, Skill_dev),
names_to = "Subject",
values_to = "Marks") %>%
group_by(Subject, Marks) %>%
summarise(Count = n(), .groups = "drop")  # Count occurrences of each mark
# Define the max marks for each subject manually
max_marks <- c(
"AS" = 100,
"ERC" = 100,
"LA" = 100,
"PD" = 100,
"PE" = 50,
"Prac" = 50,
"RM" = 100,
"Skill_dev" = 50
)
# Convert marks to percentage based on subject-specific max marks
OB_percentage <- OB_marks %>%
mutate(across(names(max_marks), ~ (.x / max_marks[cur_column()]) * 100))
# Reshape data to long format for line plot
OB_long <- OB_percentage %>%
pivot_longer(-c(1, 2), names_to = "Subject", values_to = "Percentage")
# Create an interactive line plot (Fixing the color mapping issue)
plot_ly(
OB_long,
x = ~Subject,
y = ~Percentage,
color = ~`Name of Student`, # Properly assign student names to color
type = "scatter",
mode = "lines+markers"
) %>%
layout(
title = "Student Performance Across Subjects (Percentage)",
xaxis = list(title = "Subjects", tickangle = 45),
yaxis = list(title = "Percentage", range = c(0, 100)),
legend = list(title = list(text = "Students"))
)
# pie Chart from Overall_marks result Status
Overall_marks %>%
count(`Result Status`) %>%
plot_ly(
labels = ~`Result Status`,
values = ~n,
type = "pie",
hole = 0.6, # Balanced donut hole
textinfo = "label+percent",
textposition = "inside",
marker = list(line = list(color = "white", width = 3)) # Smooth sector edges
) %>%
layout(title = "Overall Result Status")
# Bubble plot
ggplot(long_data, aes(x = Subject, y = Marks, size = Count, color = Subject)) +
geom_point(alpha = 0.7) +  # Bubble transparency
scale_size_continuous(range = c(2, 20)) +  # Adjust bubble sizes
labs(title = "Subject-wise Score Distribution",
x = "Subjects",
y = "Marks",
size = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Convert data to long format
long_data <- OBmarks %>%
pivot_longer(cols = c(AS, ERC, LA, PD, PE, Prac, RM, Skill_dev),
names_to = "Subject",
values_to = "Marks") %>%
group_by(Subject, Marks) %>%
summarise(Count = n(), .groups = "drop")  # Count occurrences of each mark
# Convert data to long format
long_data <- OB_marks %>%
pivot_longer(cols = c(AS, ERC, LA, PD, PE, Prac, RM, Skill_dev),
names_to = "Subject",
values_to = "Marks") %>%
group_by(Subject, Marks) %>%
summarise(Count = n(), .groups = "drop")  # Count occurrences of each mark
# Bubble plot
ggplot(long_data, aes(x = Subject, y = Marks, size = Count, color = Subject)) +
geom_point(alpha = 0.7) +  # Bubble transparency
scale_size_continuous(range = c(2, 20)) +  # Adjust bubble sizes
labs(title = "Subject-wise Score Distribution",
x = "Subjects",
y = "Marks",
size = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
?hclust
install.packages(sparcl)
install.packages('sparcl')
library(sparcl)
ColorDendrogram(hc_result, k = 2)
ColorDendrogram(hc_result,branchlength = 2)
dendextend
install.packages('dendextend')
library(dendextend)
avg_dend_obj <- as.dendrogram(hc_result)
# Apply Hierarchical Clustering
hc_result <- hclust(dist_matrix, method = "ward.D2")
?dendextend
?color_branches
#| layout: [ [40,60],[100] ]
#| echo: false
Overall_marks %>%
count(`Result Status`) %>%
plot_ly(
x = ~`Result Status`,
y = ~n,
type = "bar",
marker = list(color = c("orange","red","green"))  # Customize bar color
) %>%
layout(
title = list(text = "Overall Result Status", x = 0.5),
xaxis = list(title = "Result Status"),
yaxis = list(title = "Count"),
bargap = 0.2  # Adjust spacing between bars
)
# Reshape data to long format for line plot
OB_long <- OB_percentage %>%
pivot_longer(-c(1, 2), names_to = "Subject", values_to = "Percentage")
df_long <- OB_marks %>%
pivot_longer(
cols = -c(`Roll No.`, `Name of Student`),
names_to = "Subject", values_to = "Marks"
)
# Violin Plot using Plotly
plot_ly(OB_long,
x = ~Subject, y = ~Percentage, type = "box",
fillcolor = "skyblue", line = list(color = "black")
) %>%
layout(
title = "Distribution of OB Marks by Subject",
yaxis = list(title = "Percentage"),
xaxis = list(title = "Subject", tickangle = 45)
)
# add horizontal line for average
abline(h =40, col = "red", lwd = 2)
#| layout: [ [40,60],[100] ]
#| echo: false
Overall_marks %>%
count(`Result Status`) %>%
plot_ly(
x = ~`Result Status`,
y = ~n,
type = "bar",
marker = list(color = c("orange","red","green"))  # Customize bar color
) %>%
layout(
title = list(text = "Overall Result Status", x = 0.5),
xaxis = list(title = "Result Status"),
yaxis = list(title = "Count"),
bargap = 0.2  # Adjust spacing between bars
)
# Reshape data to long format for line plot
OB_long <- OB_percentage %>%
pivot_longer(-c(1, 2), names_to = "Subject", values_to = "Percentage")
df_long <- OB_marks %>%
pivot_longer(
cols = -c(`Roll No.`, `Name of Student`),
names_to = "Subject", values_to = "Marks"
)
# Violin Plot using Plotly
library(plotly)
plot_ly(OB_long,
x = ~Subject, y = ~Percentage, type = "box",
marker = list(color = "skyblue"),  # Set fill color properly
line = list(color = "black")
) %>%
layout(
title = "Distribution of OB Marks by Subject",
yaxis = list(title = "Percentage"),
xaxis = list(title = "Subject", tickangle = 45),
# Add a horizontal line at 40% (Example: Pass mark)
shapes = list(
list(
type = "line",
x0 = -0.5, x1 = length(unique(OB_long$Subject)) - 0.5,  # Cover all subjects
y0 = 40, y1 = 40,  # Position of the line
line = list(color = "red", width = 2, dash = "dash")  # Customize line style
)
)
)
